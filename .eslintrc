{
    "parserOptions": {
        "ecmaVersion": 6
    },

    "env": {
        "browser": true,
        "node": true,
        "es6": true
    },

    "globals": {
        "JS": true,
        "JSSRV": true
    },

    "rules": {
        ////////// Possible Errors //////////

        "comma-dangle": "warn",             // disallow trailing commas in object literals
        "no-cond-assign": "error",          // disallow assignment in conditional expressions
        "no-console": "warn",               // disallow use of console (off by default in the node environment)
        "no-constant-condition": "error",   // disallow use of constant expressions in conditions
        "no-control-regex": "off",          // disallow control characters in regular expressions
        "no-debugger": "warn",              // disallow use of debugger
        "no-dupe-args": "error",            // disallow duplicated argument names
        "no-dupe-keys": "error",            // disallow duplicate keys when creating object literals
        "no-duplicate-case": "error",       // disallow duplicated case labels in a switch statement
        "no-empty": "warn",                 // disallow empty statements
        "no-empty-character-class": "warn", // disallow the use of empty character classes in regular expressions
        "no-ex-assign": "error",            // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": "warn",    // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": "off",           // disallow unnecessary parentheses
        "no-extra-semi": "warn",            // disallow unnecessary semicolons
        "no-func-assign": "warn",           // disallow overwriting functions written as function declarations
        "no-inner-declarations": "off",     // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": "error",       // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": "warn",  // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": "warn",        // disallow negation of the left operand of an in expression
        "no-obj-calls": "off",              // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": "warn",          // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": "warn",         // disallow sparse arrays
        "no-unexpected-multiline": "error", // disallow bugs caused by depending on ASI
        "no-unreachable": "error",          // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": "error",               // disallow comparisons with the value NaN
        "valid-jsdoc": "off",               // Ensure JSDoc comments are valid
        "valid-typeof": "error",            // Ensure that the results of typeof are compared against a valid string

        ////////// Best Practices //////////

        "accessor-pairs": "off",                // Enforces getter/setter pairs in objects
        "array-callback-return": "warn",        // ensure that Array.prototype methods use a return
        "block-scoped-var": "warn",             // treat var statements as if they were block scoped
        "complexity": ["warn", 15],             // specify the maximum cyclomatic complexity allowed in a program
        "consistent-return": "warn",            // require return statements to either always or never specify values
        "curly": "error",                       // specify curly brace conventions for all control statements
        "default-case": "warn",                 // require default case in switch statements
        "dot-location": ["error", "property"],  // enforces consistent newlines before or after dots
        "dot-notation": "warn",                 // encourages use of dot notation whenever possible
        "eqeqeq": "warn",                       // require the use of === and !==
        "guard-for-in": "off",                  // make sure for-in loops have an if statement
        "no-alert": "warn",                     // disallow the use of alert, confirm, and prompt
        "no-caller": "error",                   // disallow use of arguments.caller or arguments.callee
        "no-case-declarations": "error",        // disallow declaring functions/vars inside case statements
        "no-div-regex": "warn",                 // disallow division operators explicitly at beginning of regular expression
        "no-else-return": "error",              // disallow else after a return in an if
        "no-empty-function": "warn",            // disallow use of empty functions
        "no-empty-pattern": "warn",             // disallow use of empty destructuring patterns
        "no-eq-null": "off",                    // disallow comparisons to null without a type-checking operator
        "no-eval": "error",                     // disallow use of eval()
        "no-extend-native": "error",            // disallow adding to native types
        "no-extra-bind": "warn",                // disallow unnecessary function binding
        "no-extra-label": "error",              // disallow unnecessary labels
        "no-fallthrough": "warn",               // disallow fallthrough of case statements
        "no-floating-decimal": "error",         // disallow the use of leading or trailing decimal points in numeric literals
        "no-implicit-coercion": "warn",         // disallow the type conversions with shorter notations
        "no-implicit-globals": "error",         // disallow declarations that would implicitly be global
        "no-implied-eval": "error",             // disallow use of eval()-like methods
        "no-invalid-this": "off",               // disallow this keywords outside of classes or class-like objects
        "no-iterator": "error",                 // disallow usage of __iterator__ property
        "no-labels": "error",                   // disallow use of labeled statements
        "no-lone-blocks": "warn",               // disallow unnecessary nested blocks
        "no-loop-func": "warn",                 // disallow creation of functions within loops
        "no-magic-numbers": "off",              // disallow the use of magic numbers
        "no-multi-spaces": ["warn", {           // disallow use of multiple spaces
            "exceptions": {
                "ArrayExpression": true,
                "AssignmentExpression": true,
                "CallExpression": true,
                "LogicalExpression": true,
                "ObjectExpression": true,
                "Property": true,
                "SwitchCase": true,
                "VariableDeclarator": true
            }
        }],
        "no-multi-str": "error",                    // disallow use of multiline strings
        "no-native-reassign": "error",              // disallow reassignments of native objects
        "no-new": "off",                            // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": "off",                       // disallow use of new operator for Function object
        "no-new-wrappers": "error",                 // disallows creating new instances of String, Number, and Boolean
        "no-octal": "error",                        // disallow use of octal literals
        "no-octal-escape": "error",                 // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \"error"51";
        "no-param-reassign": "off",                 // disallow reassignment of function parameters
        "no-proto": "error",                        // disallow usage of __proto__ property
        "no-redeclare": "warn",                     // disallow declaring the same variable more then once
        "no-return-assign": "warn",                 // disallow use of assignment in return statement
        "no-script-url": "error",                   // disallow use of javascript: urls.
        "no-self-compare": "warn",                  // disallow comparisons where both sides are exactly the same
        "no-sequences": "error",                    // disallow use of comma operator
        "no-throw-literal": "warn",                 // restrict what can be thrown as an exception
        "no-unmodified-loop-condition": "error",    // disallow unmodified conditions of loops
        "no-unused-expressions": "warn",            // disallow usage of expressions in statement position
        "no-useless-call": "warn",                  // disallow unnecessary .call() and .apply()
        "no-useless-concat": "warn",                // disallow unnecessary concatenation of literals or template literals
        "no-void": "error",                         // disallow use of void operator
        "no-warning-comments": "off",               // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME
        "no-with": "error",                         // disallow use of the with statement
        "radix": "warn",                            // require use of the second argument for parseInt()
        "vars-on-top": "warn",                      // requires to declare all vars on top of their containing scope
        "wrap-iife": "warn",                        // require immediate function invocation to be wrapped in parentheses
        "yoda": "warn",                             // require or disallow Yoda conditions

        ////////// Strict Mode //////////

        "strict": "off", // controls location of Use Strict Directives

        ////////// Variables //////////

        "init-declarations": "off",             // enforce or disallow variable initializations at definition
        "no-catch-shadow": "error",             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-delete-var": "error",               // disallow deletion of variables
        "no-label-var": "error",                // disallow labels that share a name with a variable
        "no-shadow": "warn",                    // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": "error",  // disallow shadowing of names such as arguments
        "no-undef": "error",                    // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": "error",               // disallow use of undefined when initializing variables
        "no-undefined": "off",                  // disallow use of undefined variable
        "no-unused-vars": "warn",               // disallow declaration of variables that are not used in the code
        "no-use-before-define": "warn",         // disallow use of variables before they are defined

        ////////// Node.js //////////

        "callback-return": ["error", [    // enforce return after a callback
            "callback",
            "cb",
            "next",
            "done"
        ]],
        "global-require": "off",        // enforce require() on top-level module scope
        "handle-callback-err": "off",   // enforces error handling in callbacks (on by default in the node environment)
        "no-mixed-requires": "off",     // disallow mixing regular variable and require declarations (on by default in the node environment)
        "no-new-require": "off",        // disallow use of new operator with the require function (on by default in the node environment)
        "no-path-concat": "off",        // disallow string concatenation with __dirname and __filename (on by default in the node environment)
        "no-process-env": "off",        // disallow use of process.env
        "no-process-exit": "off",       // disallow process.exit() (on by default in the node environment)
        "no-restricted-modules": "off", // restrict usage of specified node modules
        "no-sync": "off",               // disallow use of synchronous methods

        ////////// Stylistic Issues //////////

        "array-bracket-spacing": ["warn",             // enforce spacing inside array brackets (fixable)
            "always",
            {
                "arraysInArrays": false,
                "singleValue": true,
                "objectsInArrays": false
            }
        ],
        "block-spacing": ["warn", "always"],          // disallow or enforce spaces inside of single line blocks (fixable)"
        "brace-style": "error",                       // enforce one true brace style
        "camelcase": ["warn", {                       // Require camel case names (except in properties)
            "properties": "never"
        }],
        "comma-spacing": "warn",                // enforce spacing before and after comma
        "comma-style": ["warn", "last"],        // enforce one true comma style
        "computed-property-spacing": "off",     // require or disallow padding inside computed properties (fixable)
        "consistent-this": ["warn", "self"],    // enforces consistent naming when capturing the current execution context
        "eol-last": "error",                    // enforce newline at the end of file, with no multiple empty lines
        "func-names": "off",                    // require function expressions to have a name
        "func-style": ["warn", "declaration"],  // enforces use of function declarations or expressions
        "id-blacklist": "off",                  // prevent certain names from being used
        "id-length": "off",                     // limit identifiers to a min/max length
        "id-match": "off",                      // Force identifiers to match a regex
        "indent": ["off", 4],                   // specify tab or space width for your code (fixable)
        "jsx-quotes": "off",                    // specify whether double or single quotes should be used in JSX attributes
        "key-spacing": ["warn", {               // enforces spacing between keys and values in object literal properties
            "beforeColon": true,
            "afterColon": true,
            "align": "colon"
        }],
        "keyword-spacing": ["warn", {           // require spacing before most keywords (fixable)
            "before": true,
            "after": false,
            "overrides": {
                "return": {
                    "after": true
                },
                "else": {
                    "after": true
                },
                "try": {
                    "after": true
                },
                "catch": {
                    "after": true
                },
                "case": {
                    "after": true
                },
                "from": {
                    "after": true
                },
                "import": {
                    "after": true
                }
            }
        }],
        "linebreak-style": "off",               // disallow mixed 'LF' and 'CRLF' as linebreaks
        "lines-around-comment": ["off", {       // enforce empty lines around comments
            "beforeBlockComment": true,
            "beforeLineComment": true,
            "allowBlockStart": true,
            "allowObjectStart": true,
            "allowArrayStart": true
        } ],
        "max-nested-callbacks": "off",              // specify the maximum depth callbacks can be nested
        "max-params": ["warn", 4],                  // limit the number of params a method can take
        "max-statements": ["warn", 15, {            // limit the number of statements a method can contain
            "ignoreTopLevelFunctions": true
        }],
        "new-cap": "warn",                          // require a capital letter for constructors
        "new-parens": "error",                      // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": "warn",                // require or disallow an empty newline after variable declarations
        "newline-before-return": "warn",            // require or disallow an empty newline before a return statement
        "newline-per-chained-call": "warn",         // require or disallow a newline per chained call
        "no-array-constructor": "error",            // disallow use of the Array constructor
        "no-bitwise": "error",                      // disallow the usage of bitwise operators (|, &, <<, >>) as they're often an error
        "no-continue": "off",                       // disallow use of the continue statement
        "no-inline-comments": "off",                // disallow comments inline after code
        "no-lonely-if": "error",                    // disallow if as the only statement in an else block
        "no-mixed-spaces-and-tabs": "error",        // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": "warn",          // disallow multiple empty lines
        "no-negated-condition": "off",              // disallow negated conditions
        "no-nested-ternary": "error",               // disallow nested ternary expressions
        "no-new-object": "error",                   // disallow use of the Object constructor
        "no-plusplus": "off",                       // disallow use of ++ and --
        "no-restricted-syntax": ["error",           // disallow use of certain syntax in code
            "ClassBody",
            "ClassDeclaration",
            "ClassExpression",
            "ExperimentalRestProperty",
            "ExperimentalSpreadProperty",
            "WithStatement",
            "RestElement",
            "YieldExpression",
            "JSXIdentifier",
            "JSXNamespacedName",
            "JSXMemberExpression",
            "JSXEmptyExpression",
            "JSXExpressionContainer",
            "JSXElement",
            "JSXClosingElement",
            "JSXOpeningElement",
            "JSXAttribute",
            "JSXSpreadAttribute",
            "JSXText"
        ],
        "no-spaced-func": "warn",                       // disallow space between function identifier and application
        "no-ternary": "off",                            // disallow the use of ternary operators
        "no-trailing-spaces": "off",                    // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": "off",                  // disallow dangling underscores in identifiers
        "no-unneeded-ternary": "warn",                  // disallow the use of ternary operators when a simpler alternative exists
        "no-whitespace-before-property": "error",       // disallow whitespace before properties
        "object-curly-spacing": ["warn",                // require or disallow spaces inside object brackets
            "always",
            {
                "objectsInObjects": true,
                "arraysInObjects": true
            }
        ],
        "one-var": "warn",                              // allow just one var statement per function
        "one-var-declaration-per-line": ["warn",
            "initializations"
        ],
        "operator-assignment": "off",                   // require assignment operator shorthand where possible or prohibit it entirely
        "operator-linebreak": ["warn", "after"],       // enforce operators to be placed before or after line breaks
        "padded-blocks": ["warn", "never"],             // enforce padding within blocks
        "quote-props": ["warn", "as-needed"],           // require quotes around object literal property names
        "quotes": ["error", "double", "avoid-escape"],  // specify whether double or single quotes should be used
        "require-jsdoc": "off",                         // Require JSDoc comment
        "semi": "error",                                // require or disallow use of semicolons instead of ASI
        "semi-spacing": ["warn", {                      // disallow space before/after semicolon
            "before": false,
            "after": true
        }],
        "sort-vars": "off",                                 // sort variables within the same declaration block
        "space-before-blocks": ["warn", "always"],         // require or disallow space before blocks
        "space-before-function-paren": ["warn", "never"],  // require a space after function names
        "space-in-parens": ["warn", "never"],              // disallow spaces directly inside parentheses
        "space-infix-ops": "error",                         // require spaces around operators
        "space-unary-ops": "off",                           // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "spaced-comment": ["warn", "always"],               // require or disallow a space immediately following the // in a line comment
        "wrap-regex": "off",                                // require regex literals to be wrapped in parentheses

        ////////// ES6 //////////
        "arrow-body-style": ["warn", "as-needed"],      // Require curly braces around arrow bodies in most cases
        "arrow-parens": ["error", "always"],            // Require parentheses around arrow function params
        "arrow-spacing": "error",                       // Require spaces on both sides of the => in an arrow function
        "constructor-super": "error",
        "generator-star-spacing": "error",
        "no-class-assign": "error",
        "no-confusing-arrow": [                         // disallow arrow functions that could be confused w/ comparisons
            "error",
            { "allowParens": true }
        ],
        "no-const-assign": "error",                     // disallow modifying const variables
        "no-dupe-class-members": "error",
        "no-new-symbol": "error",
        "no-restricted-imports": "error",
        "no-this-before-super": "error",
        "no-useless-constructor": "error",
        "no-var": "off",
        "object-shorthand": "off",
        "prefer-arrow-callback": "off",
        "prefer-const": "off",
        "prefer-reflect": "off",
        "prefer-rest-params": "off",
        "prefer-spread": "off",
        "prefer-template": "warn",
        "require-yield": "error",
        "template-curly-spacing": "error",            // disallow spaces inside embedded expressions in template strings
        "yield-star-spacing": "error"
    }
}
